<%= javascript_include_tag 'tablelock'%>
<div id="explain" style="margin-left:2em;margin-right:2em">
  <%= @prompt.body %>
</div>
<div id="action" style="margin-left:2em;margin-right:2em">
  <% form_tag :action => 'find_space' do %>
    <div id='dates'>
      <%= render :partial => 'shared/dates' %>
    </div>
    <% if @option.show_remote_available? %>
      <span id="count">
    <% else %>
      <span id="count" style ="display: none">
    <% end %>
      <%= render :partial => 'shared/count' %>
      </span>
    <p>
      <% if @option.use_remote_adults? %>
        <label for="reservation_adults"><b><%= I18n.t('reservation.nr_Adults') %></b></label>
        <%= text_field 'reservation', 'adults', {:size => '2', :autocomplete => 'off'} %>
      <% end %>

      <% if @option.use_remote_pets? %>
        <label for="reservation_pets"><b><%= I18n.t('reservation.nr_Pets') %></b></label>
        <%= text_field 'reservation', 'pets', {:size => '2', :autocomplete => 'off'} %>
      <% end %>

      <% if @option.use_remote_children? %>
        <label for="reservation_kids"><b><%= I18n.t('reservation.nr_Children') %></b></label>
        <%= text_field 'reservation', 'kids', {:size => '2', :autocomplete => 'off'} %>
      <% end %>
    </p>

    <p>
      <% if @option.use_remote_rig_type? && Rigtype.active.count > 0 %>
        <b><%= I18n.t('reservation.RigType') %></b>
        <%= collection_select(:reservation, :rigtype_id, Rigtype.active, :id, :name, {:prompt => true}) %>
      <% end %>
      <% if @option.use_remote_length? %>
        <label for="reservation_length"><b><%= I18n.t('reservation.Length') %></b></label>
        <%= text_field 'reservation', 'length', {:size => '2', :autocomplete => 'off'} %>
      <% end %>
      <% if @option.use_remote_slides? %>
        <label for="reservation_slides"><b><%= I18n.t('reservation.nr_Slides') %></b></label>
        <%= text_field 'reservation', 'slides', {:size => '2', :autocomplete => 'off'} %>
      <% end %>
      <% if @option.use_remote_age? %>
        <label for="reservation_rig_age"><b><%= I18n.t('reservation.RigAge') %></b></label>
        <%= text_field 'reservation', 'rig_age', {:size => '3', :autocomplete => 'off'} %>
      <% end %>
    </p>
    <p>
    <% if @option.remote_discount? && Discount.active.count > 0 %>
      <b><%= I18n.t('reservation.Discount') %></b>
      <%= collection_select(:reservation, :discount_id, Discount.active, :id, :name, {:prompt => true}) %>
    <% end %>
    <% if @option.remote_recommendations? && @option.use_recommend? && Recommender.active.count > 0 %>
      <b><%= I18n.t('reservation.RecommendedBy') %></b>
      <%= collection_select(:reservation, :recommender_id, Recommender.active, :id, :name, {:prompt => true}) %>
    <% end %>
    </p>
  <%= render :partial => 'shared/sitetype' %>
<div>
<% @extras.each do |e| -%>
  <span class="extra">
    <b><%= e.name %></b>
    <%= check_box 'extra', "extra#{e.id}", {}, '1','0' %>
    <% if e.extra_type == Extra::COUNTED -%>
      <b><%= I18n.t('reservation.Count') %></b>
      <%= text_field 'extra', "count#{e.id}", {:size => '2', :value => '1', :autocomplete => 'off'} %>
    <% end -%>
  </span>
<% end -%>
</div>
  <%# <p> %>
    <%= submit_tag I18n.t('reservation.FindSpace'), :disable_with => "Processing..." %>
  <%# </p> %>
<% end %>
  <% if @reservation && @reservation.id && @reservation.id > 0 %>
    <%= button_to  I18n.t('reservation.Cancel'), { :action => :abandon_remote, :reservation_id => @reservation.id },
						  :confirm => I18n.t('remote.Cancel'),
						  :method => "post" %>
  <% else %>
    <%= button_to  I18n.t('reservation.Cancel'), :action => :finished, :method => "post" %>
  <% end %>
  <br>
  <a href="../images/sitemap.jpg" onclick="goclicky(this); return false;" target="_blank" class="sitemap" style="margin-left: 0px">Site Map</a>
  <input type="date" id="custom_date" class="custom_date" onchange="refreshTable()">
  <input type="button" value="Back" onclick="PrevRes()" class="customArrow remoteBtnBackDesktop" style="margin-left:40px">
  <input type="button" value="Forward" onclick="NextRes()" class="customArrow remoteBtnForwardDesktop">
  <div class="d-none remoteBtnDiv">
    <input type="button" value="Back" onclick="PrevRes()" class="customArrow remoteBtnBack" style="margin-left:40px">
    <input type="button" value="Forward" onclick="NextRes()" class="customArrow remoteBtnForward">
  </div>
  <div id="available_div" class="mt-3">
    <div id="available_head" style="z-index:1;top:0px;" class="position-sticky">
      <%= header -%>
    </div>
    <table id="available" style="z-index:0" class="available" cellspacing="0" admin-session="<%= session[:admin_status] %>">
      <tbody id="available_body">
        <%= available() %>
      </tbody>
    </table>
  </div>
</div>
<script type="text/javascript">
  document.getElementById('custom_date').valueAsDate = new Date();

  //calc real width of cells and set width.
  var thElement = document.querySelectorAll('#lockedHeadDay')[0].childNodes[0].childNodes[0];
  var cellsCount = document.querySelectorAll('#lockedHeadDay')[0].childNodes[0].childElementCount;
  var strwidth = getComputedStyle(thElement)["min-width"];
  var minWidth = Number(strwidth.substr(0, strwidth.length-2));
  var expectedWidth = Math.round((screen.width-128)/(cellsCount));
  var realWidth = 0;
  if(expectedWidth <= minWidth) {
    realWidth = minWidth;
  }else{
    realWidth = expectedWidth;
  }
  for(var i = 0; i < cellsCount; i++) {
    var ths = document.querySelectorAll('.header-th');
    ths[i].style.cssText += "min-width: " + realWidth + "px";
  }

  //combine div and table when scroll
  document.querySelector('table').addEventListener('scroll', function(e) {
    document.querySelector("#stickyTh").style.cssText += "position:sticky;left:0;";
    document.querySelector('#flexDiv').scrollLeft = e.target.scrollLeft;
  })

  document.querySelector('#flexDiv').addEventListener('scroll', function(e) {
    document.querySelector("#stickyTh").style.cssText += "position:sticky;left:0;";
    document.querySelector('table').scrollLeft = e.target.scrollLeft;
  })

  //add link to available td
  var cells = document.querySelectorAll(".available td");
  for (var i = 0; i < cells.length; i++) {
    cells[i].style.minWidth = realWidth + "px";
    if (cells[i].hasChildNodes()) {
      if(cells[i].childNodes[0].tagName == "A") {
        cells[i].parentElement.setAttribute("hasspace", "true");
      }
    }else{
      cells[i].style.cssText += "cursor:pointer;";
      cells[i].addEventListener("click", function(){
        handler(this);
      });
    } 
  }

  function handler(param) {
    var parentTr = param.parentElement;
    var spaceTxt = parentTr.getElementsByTagName("td")[0].textContent;
    var startSpace = "";
    if(parentTr.getAttribute("hasspace") != "true") {
      var cellIndex = param.cellIndex;
      var currentTh = document.querySelectorAll('#flexDiv')[0].childNodes[cellIndex];
      var start_year = currentTh.childNodes[0].getAttribute("year");
      var start_month = currentTh.childNodes[3].textContent;
      var start_date = currentTh.childNodes[2].textContent;
    }else{
      var tempCount = 0;
      var isColspan = 0;
      for (let i = 0; i <= param.cellIndex; i++) {
        if (parentTr.childNodes[i].hasAttribute("colspan")) {
          var tempIndex = parentTr.childNodes[i].getAttribute("colspan");
          tempCount += Number(tempIndex);
          isColspan = 1;
        }
      }
      if(isColspan == 0) {
        var cellIndex = Number(param.cellIndex);
      }else{
        var cellIndex = Number(param.cellIndex)+tempCount-1;
      }
      var currentTh = document.querySelectorAll('#flexDiv')[0].childNodes[cellIndex];
      
      var start_year = currentTh.childNodes[0].getAttribute("year");
      var start_month = currentTh.childNodes[3].textContent;
      var start_date = currentTh.childNodes[2].textContent;
    }
    location.href = "/remotereservation";
    // location.href = "/remotereservation?" + "start_year=" + start_year + "&start_month=" + getMonthFromString(start_month) + "&start_date=" + start_date + "&space=" + spaceTxt;
  }
  //Always update the end date 1 day after the start date when click the calendar
  document.getElementsByClassName("cds_body")[0].onclick = function() {myFunction1()};
  document.getElementsByClassName("cds_body")[1].onclick = function() {myFunction1()};

  function myFunction() {
    var startDate = glbStartCalendarDateSelect.selected_date;

    startDate.setDate(startDate.getDate() + 1);
    var o = $H({ day: startDate.getDate(), month: startDate.getMonth(), year: startDate.getFullYear(), hour: startDate.getHours(), minute: startDate.getMinutes() });
    glbEndCalendarDateSelect.navYear(startDate.getFullYear());
    glbEndCalendarDateSelect.navMonth(startDate.getMonth());
    glbEndCalendarDateSelect.updateSelectedDate(o, true);
    glbEndCalendarDateSelect.refresh();
    startDate.setDate(startDate.getDate() - 1);
  };
  function myFunction1() {
    var startDate = glbStartCalendarDateSelect.selected_date;
    var endDate = glbEndCalendarDateSelect.selected_date;
    if(endDate <= startDate) {
      startDate.setDate(startDate.getDate() + 1);
      var o = $H({ day: startDate.getDate(), month: startDate.getMonth(), year: startDate.getFullYear(), hour: startDate.getHours(), minute: startDate.getMinutes() });
      glbEndCalendarDateSelect.navYear(startDate.getFullYear());
      glbEndCalendarDateSelect.navMonth(startDate.getMonth());
      glbEndCalendarDateSelect.updateSelectedDate(o, true);
      glbEndCalendarDateSelect.refresh();
      startDate.setDate(startDate.getDate() - 1);
    }else{
      glbEndCalendarDateSelect.refresh();
    }
  };

  function refreshTable() {
    let start_date = document.getElementById("custom_date").value;
    let arr = start_date.split("-");
    new Ajax.Request('refreshTable', {
      parameters: {"startYear": arr[0], "startMonth": arr[1], "startDate": arr[2], "controllerName": "remotereservation"},
      onSuccess: function(res) {
        document.getElementById("available_div").innerHTML = res.responseText;
        for(var i = 0; i < cellsCount; i++) {
          var ths = document.querySelectorAll('.header-th');
          ths[i].style.cssText += "min-width: " + realWidth + "px";
        }

        if(screen.width <= 500) {
          document.querySelector("#available_head").style.cssText += "top: 180px !important";
        }else{
          document.querySelector("#available_head").style.cssText += "top: 0px !important";
        }

        document.querySelector('table').addEventListener('scroll', function(e) {
          document.querySelector("#stickyTh").style.cssText += "position:sticky;left:0;";
          document.querySelector('#flexDiv').scrollLeft = e.target.scrollLeft;
        })

        document.querySelector('#flexDiv').addEventListener('scroll', function(e) {
          document.querySelector("#stickyTh").style.cssText += "position:sticky;left:0;";
          document.querySelector('table').scrollLeft = e.target.scrollLeft;
        })

        addLinkToTd();
      }
    });
  }
  function getMonthFromString(month){
    return new Date(Date.parse(month +" 1, 2012")).getMonth()+1;
  }
  function NextRes() {
    let resTableHeadDay = document.querySelectorAll('#lockedHeadDay')[0].childNodes[0];
    let nextStartYear = resTableHeadDay.lastChild.childNodes[0].getAttribute("year");
    let nextStartMonth = resTableHeadDay.lastChild.childNodes[3].innerText;
    let nextStartDate = resTableHeadDay.lastChild.childNodes[2].innerText;
    const currentLastDate = new Date(Number(nextStartYear), getMonthFromString(nextStartMonth)-1, Number(nextStartDate));
    currentLastDate.setDate(currentLastDate.getDate() + 1);

    new Ajax.Request('getNextData', {
      parameters: {"startYear": currentLastDate.getFullYear(), "startMonth": currentLastDate.getMonth()+1, "startDate": currentLastDate.getDate(), "controllerName": "remote"},
      onSuccess: function(res) {
        document.getElementById("available_div").innerHTML = res.responseText;
        for(var i = 0; i < cellsCount; i++) {
          var ths = document.querySelectorAll('.header-th');
          ths[i].style.cssText += "min-width: " + realWidth + "px";
        }

        if(screen.width <= 500) {
          document.querySelector("#available_head").style.cssText += "top: 180px !important";
        }else{
          document.querySelector("#available_head").style.cssText += "top: 0px !important";
        }

        document.querySelector('table').addEventListener('scroll', function(e) {
          document.querySelector("#stickyTh").style.cssText += "position:sticky;left:0;";
          document.querySelector('#flexDiv').scrollLeft = e.target.scrollLeft;
        })

        document.querySelector('#flexDiv').addEventListener('scroll', function(e) {
          document.querySelector("#stickyTh").style.cssText += "position:sticky;left:0;";
          document.querySelector('table').scrollLeft = e.target.scrollLeft;
        })

        addLinkToTd();
      }
    });
  }

  function PrevRes() {
    let resTableHeadDay = document.querySelectorAll('#lockedHeadDay')[0].childNodes[0];
    let prevStartYear = resTableHeadDay.childNodes[1].childNodes[0].getAttribute("year");
    let prevStartMonth = resTableHeadDay.childNodes[1].childNodes[3].innerText;
    let prevStartDate = resTableHeadDay.childNodes[1].childNodes[2].innerText;
    let count = resTableHeadDay.childElementCount-1;
    const currentFirstDate = new Date(Number(prevStartYear), getMonthFromString(prevStartMonth)-1, Number(prevStartDate));
    currentFirstDate.setDate(currentFirstDate.getDate() - count);
    
    new Ajax.Request('getPreviousData', {
      parameters: {"startYear": currentFirstDate.getFullYear(), "startMonth": currentFirstDate.getMonth()+1, "startDate": currentFirstDate.getDate(), "controllerName": "remote"},
      onSuccess: function(res) {
        document.getElementById("available_div").innerHTML = res.responseText;
        for(var i = 0; i < cellsCount; i++) {
          var ths = document.querySelectorAll('.header-th');
          ths[i].style.cssText += "min-width: " + realWidth + "px";
        }

        if(screen.width <= 500) {
          document.querySelector("#available_head").style.cssText += "top: 180px !important";
        }else{
          document.querySelector("#available_head").style.cssText += "top: 0px !important";
        }

        document.querySelector('table').addEventListener('scroll', function(e) {
          document.querySelector("#stickyTh").style.cssText += "position:sticky;left:0;";
          document.querySelector('#flexDiv').scrollLeft = e.target.scrollLeft;
        })

        document.querySelector('#flexDiv').addEventListener('scroll', function(e) {
          document.querySelector("#stickyTh").style.cssText += "position:sticky;left:0;";
          document.querySelector('table').scrollLeft = e.target.scrollLeft;
        })

        addLinkToTd();
      }
    });
  }
  function addLinkToTd() {
    let cells = document.querySelectorAll(".available td");
    for (var i = 0; i < cells.length; i++) {
      cells[i].style.minWidth = realWidth + "px";
      if (cells[i].hasChildNodes()) {
        if(cells[i].childNodes[0].tagName == "A") {
          cells[i].parentElement.setAttribute("hasspace", "true");
        }
      }else{  
        cells[i].style.cssText += "cursor:pointer;";
        cells[i].addEventListener("click", function(){
          handler(this);
        });
      }
    }
  }

  function FindLeftWindowBoundry()
  {
    // In Internet Explorer window.screenLeft is the window's left boundry
    if (window.screenLeft)
    {
      return window.screenLeft;
    }
    
    // In Firefox window.screenX is the window's left boundry
    if (window.screenX)
      return window.screenX;
      
    return 0;
  }
  // Find Left Boundry of current Window
  function FindTopWindowBoundry()
  {
    // In Internet Explorer window.screenLeft is the window's left boundry
    if (window.screenTop)
    {
      return window.screenTop;
    }
    
    // In Firefox window.screenY is the window's left boundry
    if (window.screenY)
      return window.screenY;
      
    return 0;
  }
      
  function goclicky(meh)
  {
      var x = screen.width/2 - 700/2 + FindLeftWindowBoundry();
      var y = screen.height/2 - 450/2 + FindTopWindowBoundry();
      window.open(meh.href, 'sharegplus','height=500,width=700,left='+x+',top='+y);
  }
</script>
