<%= javascript_include_tag 'tablelock'%>

<div class="content_layout">
<form action="/reservation/express_2" method="post">
  <div id='dates'>
    <%= render :partial => 'dates' %>
  </div>
  <p>
  <%= render :partial => 'sitetype' %>
  </p>
  <p>
  <%= render :partial => 'count' %>
  <span id="spaces">
    <%= render :partial => 'space_pulldown' %>
  </span>
  </p>
  <span style="display: none">
    <%= collection_select(:reservation, :discount_id, Discount.active, :id, :name, {:prompt => true}) if @option.use_discount? && Discount.active.count > 0 %>
  </span>
  <p><%= submit_tag I18n.t('reservation.CompleteReservation') %></p>
</form>
  <a href="../images/sitemap.jpg" onclick="goclicky(this); return false;" target="_blank" class="sitemap">Site Map</a>
  <input type="date" id="custom_date" class="custom_date" onchange="refreshTable()">
  <%# <div> %>
    <span class="c-button c-button--arrow-left" tabindex="0" onclick="PrevRes()">
      <span class="c-button__text">Back</span>
    </span>
    <span class="c-button c-button--arrow-right" tabindex="0" onclick="NextRes()">
      <span class="c-button__text">Forward</span>
    </span>
  <%# </div> %>
  <br><br>
  <table id="available" class="available" cellspacing="0" admin-session="<%= session[:admin_status] %>">
    <thead id="available_head">
      <%= header -%>
    </thead>
    <tbody id="available_body">
      <%= available() %>
    </tbody>
  </table>
</div>

<script type="text/javascript">
  //calc real width of cells.
  var thElement = document.querySelectorAll('#lockedHeadDay')[0].childNodes[0];
  var cellsCount = document.querySelectorAll('#lockedHeadDay')[0].childElementCount;
  var strwidth = getComputedStyle(thElement)["min-width"];
  var minWidth = Number(strwidth.substr(0, strwidth.length-2));
  var expectedWidth = Math.round((screen.width)/cellsCount);
  var realWidth = 0;
  if(expectedWidth <= minWidth) {
    realWidth = minWidth
  }else{
    realWidth = expectedWidth;
  }

  document.getElementById('custom_date').valueAsDate = new Date();
  // disable scroll position
  if ('scrollRestoration' in history) {
    history.scrollRestoration = 'manual';
  }
  window.scrollTo(0, 0);
  // table header and first column lock
  // var tableHeaderTop = document.querySelector('#available_head').getBoundingClientRect().top;
  // var ths = document.querySelectorAll('#available_head th')

  // for(var i = 0; i < ths.length; i++) {
  //   var th = ths[i];
  //   th.style.top = th.getBoundingClientRect().top - tableHeaderTop + "px";
  //   th.style.cssText += "min-width: " + realWidth + "px";
  // }
  //url parse
  var current_url = window.location.href;
  const url = new URL(
    current_url
  );
  var glb_start_year = url.searchParams.get('start_year');
  var glb_start_month = url.searchParams.get('start_month');
  var glb_start_date = url.searchParams.get('start_date');
  var glb_space = url.searchParams.get('space');
  if(glb_start_date !== null && glb_space !== null) {
    var spaceSelect = document.getElementsByName("space[space_id]")[0];
    for (var i = 0; i < spaceSelect.options.length; ++i) {
        if (spaceSelect.options[i].text === glb_space) {
          spaceSelect.options[i].selected = true;
        }  
    }
    var objDate = $H({ day: Number(glb_start_date), month: Number(glb_start_month)-1, year: Number(glb_start_year) });
    glbStartCalendarDateSelect.navYear(Number(glb_start_year));
    glbStartCalendarDateSelect.navMonth(Number(glb_start_month)-1);
    glbStartCalendarDateSelect.updateSelectedDate(objDate, true);
    myFunction();

    document.getElementsByClassName("cds_body")[0].onclick = function() {myFunction1()};
    document.getElementsByClassName("cds_body")[1].onclick = function() {myFunction1()};

    refreshTable1(glb_start_year, glb_start_month, glb_start_date);
  }else{
    document.getElementsByClassName("cds_body")[0].onclick = function() {myFunction1()};
    document.getElementsByClassName("cds_body")[1].onclick = function() {myFunction1()};

    myFunction();
  }
  //add link to available td
  var cells = document.querySelectorAll(".available td");
  var table = document.getElementsByTagName('table')[0];
  for (var i = 0; i < cells.length; i++) {
    if (cells[i].hasChildNodes()) {
      if(cells[i].childNodes[0].tagName == "A") {
        cells[i].parentElement.setAttribute("hasspace", "true");
      }
    }else{
      cells[i].setAttribute('style', 'cursor: pointer');
      cells[i].addEventListener("click", function(){
        handler(this);
      });
    } 
  }
  function handler(param) {
    var spaceSelect = document.getElementsByName("space[space_id]")[0];
    var parentTr = param.parentElement;
    if(parentTr.getAttribute("hasspace") != "true") {
      var obj = parentTr.getElementsByTagName("td")[0];
      var cellIndex = param.cellIndex;
      var currentTh = parentTr.parentElement.parentElement.children[0].children[0].children[cellIndex];
      
      var start_year = currentTh.childNodes[0].getAttribute("year");
      var start_month = currentTh.childNodes[3].textContent;
      var start_date = currentTh.childNodes[2].textContent;

      var spaceTxt = obj.textContent;

      for (var i = 0; i < spaceSelect.options.length; ++i) {
          if (spaceSelect.options[i].text === spaceTxt) {
            spaceSelect.options[i].selected = true;
          }  
      }
      var objDate1 = $H({ day: Number(start_date), month: getMonthFromString(start_month)-1, year: Number(start_year) });
      glbStartCalendarDateSelect.navYear(Number(start_year));
      glbStartCalendarDateSelect.navMonth(getMonthFromString(start_month)-1);
      glbStartCalendarDateSelect.updateSelectedDate(objDate1, true);
      glbStartCalendarDateSelect.refresh();

      myFunction();
    }else{
      var spaceTxt = parentTr.getElementsByTagName("td")[0].textContent;
      var tempCount = 0;
      var isColspan = 0;
      for (let i = 0; i <= param.cellIndex; i++) {
        if (parentTr.childNodes[i].hasAttribute("colspan")) {
          var tempIndex = parentTr.childNodes[i].getAttribute("colspan");
          tempCount += Number(tempIndex);
          isColspan = 1;
        }
      }
      if(isColspan == 0) {
        var cellIndex = Number(param.cellIndex);
      }else{
        var cellIndex = Number(param.cellIndex)+tempCount-1;
      }
      var currentTh = parentTr.parentElement.parentElement.children[0].children[0].children[cellIndex];
      
      var start_year = currentTh.childNodes[0].getAttribute("year");
      var start_month = currentTh.childNodes[3].textContent;
      var start_date = currentTh.childNodes[2].textContent;

      for (var i = 0; i < spaceSelect.options.length; ++i) {
          if (spaceSelect.options[i].text === spaceTxt) {
            spaceSelect.options[i].selected = true;
          }  
      }
      var objDate1 = $H({ day: Number(start_date), month: getMonthFromString(start_month)-1, year: Number(start_year) });
      
      glbStartCalendarDateSelect.navYear(Number(start_year));
      glbStartCalendarDateSelect.navMonth(getMonthFromString(start_month)-1);
      glbStartCalendarDateSelect.updateSelectedDate(objDate1, true);
      glbStartCalendarDateSelect.refresh();

      myFunction();
    }
    window.scrollTo({top: 0, left:0, behavior: 'smooth'});
  }

  //Always update the end date 1 day after the start date when click the calendar
  function myFunction() {
    var startDate = glbStartCalendarDateSelect.selected_date;

    startDate.setDate(startDate.getDate() + 1);
    var objDate1 = $H({ day: startDate.getDate(), month: startDate.getMonth(), year: startDate.getFullYear(), hour: startDate.getHours(), minute: startDate.getMinutes() });
    glbEndCalendarDateSelect.navYear(startDate.getFullYear());
    glbEndCalendarDateSelect.navMonth(startDate.getMonth());
    glbEndCalendarDateSelect.updateSelectedDate(objDate1, true);
    glbEndCalendarDateSelect.refresh();
    startDate.setDate(startDate.getDate() - 1);
  }
  function myFunction1() {
    var startDate = glbStartCalendarDateSelect.selected_date;
    var endDate = glbEndCalendarDateSelect.selected_date;

    if(endDate <= startDate) {
      startDate.setDate(startDate.getDate() + 1);
      var objDate1 = $H({ day: startDate.getDate(), month: startDate.getMonth(), year: startDate.getFullYear(), hour: startDate.getHours(), minute: startDate.getMinutes() });
      glbEndCalendarDateSelect.navYear(startDate.getFullYear());
      glbEndCalendarDateSelect.navMonth(startDate.getMonth());
      glbEndCalendarDateSelect.updateSelectedDate(objDate1, true);
      glbEndCalendarDateSelect.refresh();
      startDate.setDate(startDate.getDate() - 1);
    }else{
      glbEndCalendarDateSelect.refresh();
    }
  };

  function refreshTable() {
    let start_date = document.getElementById("custom_date").value;
    let arr = start_date.split("-");
    new Ajax.Request('refreshTable', {
      parameters: {"startYear": arr[0], "startMonth": arr[1], "startDate": arr[2], "controllerName": "remotereservation"},
      onSuccess: function(res) {
        document.getElementById("available").innerHTML = res.responseText;
        addLinkToTd();
        let ths = document.querySelectorAll('#available th');
        for(var i = 0; i < ths.length; i++) {
          var th = ths[i];
          th.style.cssText += "min-width: " + realWidth + "px";
        }
      }
    });
  }
  function refreshTable1(startYear, startMonth, startDate) {
    new Ajax.Request('refreshTable', {
      parameters: {"startYear": startYear, "startMonth": startMonth, "startDate": startDate, "controllerName": "remotereservation"},
      onSuccess: function(res) {
        document.getElementById("available").innerHTML = res.responseText;
        addLinkToTd();
        let ths = document.querySelectorAll('#available th');
        for(var i = 0; i < ths.length; i++) {
          var th = ths[i];
          th.style.cssText += "min-width: " + realWidth + "px";
        }
      }
    });
  }
  function getMonthFromString(month){
    return new Date(Date.parse(month +" 1, 2012")).getMonth()+1;
  }
  
  function NextRes() {
    let resTableHeadDay = document.querySelectorAll('#lockedHeadDay')[0];
    let nextStartYear = resTableHeadDay.lastChild.childNodes[0].getAttribute("year");
    let nextStartMonth = resTableHeadDay.lastChild.childNodes[3].innerText;
    let nextStartDate = resTableHeadDay.lastChild.childNodes[2].innerText;
    const currentLastDate = new Date(Number(nextStartYear), getMonthFromString(nextStartMonth)-1, Number(nextStartDate));
    currentLastDate.setDate(currentLastDate.getDate() + 1);
    new Ajax.Request('getNextData', {
      parameters: {"startYear": currentLastDate.getFullYear(), "startMonth": currentLastDate.getMonth()+1, "startDate": currentLastDate.getDate(), "controllerName": "remotereservation"},
      onSuccess: function(res) {
        document.getElementById("available").innerHTML = res.responseText;
        addLinkToTd();
        let ths = document.querySelectorAll('#available th');
        for(var i = 0; i < ths.length; i++) {
          var th = ths[i];
          th.style.cssText += "min-width: " + realWidth + "px";
        }
      }
    });
  }

  function PrevRes() {
    let resTableHeadDay = document.querySelectorAll('#lockedHeadDay')[0];
    let prevStartYear = resTableHeadDay.childNodes[1].childNodes[0].getAttribute("year");
    let prevStartMonth = resTableHeadDay.childNodes[1].childNodes[3].innerText;
    let prevStartDate = resTableHeadDay.childNodes[1].childNodes[2].innerText;
    let count = resTableHeadDay.childElementCount-1;
    const currentFirstDate = new Date(Number(prevStartYear), getMonthFromString(prevStartMonth)-1, Number(prevStartDate));
    currentFirstDate.setDate(currentFirstDate.getDate() - count);
    new Ajax.Request('getPreviousData', {
      parameters: {"startYear": currentFirstDate.getFullYear(), "startMonth": currentFirstDate.getMonth()+1, "startDate": currentFirstDate.getDate(), "controllerName": "remotereservation"},
      onSuccess: function(res) {
        document.getElementById("available").innerHTML = res.responseText;
        addLinkToTd();
        let ths = document.querySelectorAll('#available th');
        for(var i = 0; i < ths.length; i++) {
          var th = ths[i];
          th.style.cssText += "min-width: " + realWidth + "px";
        }
      }
    });
  }
  function addLinkToTd() {
    let cells = document.querySelectorAll(".available td");
    for (var i = 0; i < cells.length; i++) {
      if (cells[i].hasChildNodes()) {
        if(cells[i].childNodes[0].tagName == "A") {
          cells[i].parentElement.setAttribute("hasspace", "true");
        }
      }else{  
        cells[i].setAttribute('style', 'cursor: pointer');
        cells[i].addEventListener("click", function(){
          handler(this);
        });
      }
    }
  }

  //Open a pop-up window in the center of the screen
  function FindLeftWindowBoundry()
  {
    // In Internet Explorer window.screenLeft is the window's left boundry
    if (window.screenLeft)
    {
      return window.screenLeft;
    }
    
    // In Firefox window.screenX is the window's left boundry
    if (window.screenX)
      return window.screenX;
      
    return 0;
  }
  // Find Left Boundry of current Window
  function FindTopWindowBoundry()
  {
    // In Internet Explorer window.screenLeft is the window's left boundry
    if (window.screenTop)
    {
      return window.screenTop;
    }
    
    // In Firefox window.screenY is the window's left boundry
    if (window.screenY)
      return window.screenY;
      
    return 0;
  }
      
  function goclicky(meh)
  {
      var x = screen.width/2 - 700/2 + FindLeftWindowBoundry();
      var y = screen.height/2 - 450/2 + FindTopWindowBoundry();
      window.open(meh.href, 'sharegplus','height=600,width=700,left='+x+',top='+y);
  }
</script>
